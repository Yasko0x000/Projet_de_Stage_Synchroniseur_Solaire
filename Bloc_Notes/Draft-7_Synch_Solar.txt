Pt8 du TP ESP8266 presque fini, le code marche, avec la commande :

		- mosquitto_pub -h 192.168.1.118 -t "esp8266" -m ON

	ou 
		- mosquitto_pub -h 192.168.1.118 -t "esp8266" -m OFF

Donc pour allumer ou eteindre.
Voici le code : 

/*
 Basic ESP8266 MQTT example
 This sketch demonstrates the capabilities of the pubsub library in combination
 with the ESP8266 board/library.
 It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary
  - If the first character of the topic "inTopic" is an 1, switch ON the ESP Led,
    else switch it off
 It will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.
 To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Update these with values suitable for your network.

const char* ssid = "binome_2";
const char* password = "tpRT9025";
const char* mqtt_server = "192.168.1.118";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE	(50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  Serial.print((char)payload[0]);
  if ((char)payload[0] == 'O' && (char)payload[1] == 'N') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  
  } else if ((char)payload[0] == 'O' && (char)payload[1] == 'F' && (char)payload[2] == 'F') {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }
  else{
    Serial.println("Je ne comprend pas");
  }
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("lol", "connection etablie");
      // ... and resubscribe
      client.subscribe("esp8266");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("lol", msg);
  }
}







Redige un rapport de ce qu'on a fais jusqu'a maintenant


Rapport d'activité :

Nous avons travaillé sur la mise en place d'un système de publication de données de température simulées à l'aide d'un client MQTT sur une carte Arduino (ESP8266).

Pour ce faire, nous avons utilisé les bibliothèques ESP8266WiFi.h et PubSubClient.h pour gérer la connexion WiFi et MQTT respectivement. Nous avons également utilisé la bibliothèque standard Arduino Serial pour afficher des informations de débogage sur la console série.

Nous avons commencé par configurer les informations de connexion WiFi et MQTT dans le code, en définissant les constantes SSID, mot de passe, et adresse IP du serveur MQTT. Nous avons ensuite initialisé la connexion WiFi et configuré le client MQTT pour se connecter au serveur dans la fonction "setup()".

Dans la fonction "loop()", nous avons vérifié si le client est connecté au serveur MQTT, et si ce n'est pas le cas, nous avons essayé de nous reconnecter. Nous avons ensuite généré une température simulée, la converti en chaîne de caractères, et l'avons publiée sur le sujet "temperature/room1". Il y a une pause de 1 secondes pour relancer la boucle.

Nous avons également défini une fonction "reconnect()" pour essayer de se reconnecter au serveur MQTT jusqu'à ce qu'une connexion réussie soit établie.

Enfin, nous avons vérifié que toutes les informations de connexion étaient correctes (SSID, mot de passe, adresse IP du serveur MQTT) et que les bibliothèques nécessaires étaient installées sur la carte Arduino pour s'assurer que le programme fonctionne correctement.

Il est important de noter que cette température simulée est fixe à 25 degrés dans le programme, il faudra adapter cette valeur en fonction de vos besoins. Il est également important de noter que l'adresse IP du serveur MQTT et les informations de connexion WiFi doivent être correctes et correspondre à votre réseau pour que le programme fonctionne correctement.

En résumé, nous avons travaillé sur la mise en place d'un système de publication de données de température simulées à

Dernier manip : --> Faire marcher le fonctionnement ON/OFF led depuis l'application Home Assistant